"use strict";(self.webpackChunkagridocs=self.webpackChunkagridocs||[]).push([[893],{3905:(e,t,r)=>{r.d(t,{Zo:()=>f,kt:()=>h});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},f=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=i,h=u["".concat(s,".").concat(d)]||u[d]||p[d]||a;return r?n.createElement(h,o(o({ref:t},f),{},{components:r})):n.createElement(h,o({ref:t},f))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5408:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_label:"Fertilizer",pagination_next:null},o="AgriCraft Fertilizer JSON",l={unversionedId:"customization/1.18/fertilizer",id:"customization/1.18/fertilizer",title:"AgriCraft Fertilizer JSON",description:"Structure",source:"@site/docs/customization/1.18/fertilizer.md",sourceDirName:"customization/1.18",slug:"/customization/1.18/fertilizer",permalink:"/agricraft.github.io/docs/customization/1.18/fertilizer",draft:!1,editUrl:"https://github.com/AgriCraft/agricraft.github.io/tree/main/docs/customization/1.18/fertilizer.md",tags:[],version:"current",frontMatter:{sidebar_label:"Fertilizer",pagination_next:null},sidebar:"customizationSidebar",previous:{title:"Soil",permalink:"/agricraft.github.io/docs/customization/1.18/soil"}},s={},c=[{value:"Structure",id:"structure",level:2}],f={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"agricraft-fertilizer-json"},"AgriCraft Fertilizer JSON"),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json5"},'{\n  "path": "vanilla/fertilizers/bone_meal_fertilizer.json", // An internal field used for the transmission of JSON definitions.\n  "version": "1.16.4", // The version of the AgriCraft Fertilizer JSON.\n  "json_documentation": "https://agridocs.readthedocs.io/en/master/agri_fertilizer/", // Documentation of the AgriCraft Fertilizer JSON\n  "enabled": true, // Determines if the fertilizer should be loaded or not.\n  "mods": [ // An array of mod ids. The fertilizer will be loaded only if all mods using those ids are present.\n    "agricraft",\n    "minecraft"\n  ],\n  "id": "vanilla:bone_meal_fertilizer", // The unique string id for the fertilizer.\n  "lang_key": "item.minecraft.bone_meal",// The name of the fertilizer. Can be a lang key.\n  "variants": [ // An array of objects representing all the items that this fertilizer represents.\n    {           // This specific soil considers farmland and gravel to be the same soil.\n      "type": "item",\n      "object": "minecraft:bone_meal",\n      "useTag": false,\n      "data": "",\n      "ignoredData": [\n        "*"\n      ]\n    }\n  ],\n  "trigger_mutation": true, // Determine if the fertilizer trigger mutation in the crop.\n  "trigger_weeds": true,    // Determine if the fertilizer trigger weed growth in the crop.\n  "potency": 1, // Determine the potency of the fertilizer. Bigger values equals faster growth.\n  "effect": { // Effects of the fertilizer on the plants.\n    "reduce_growth": true, // Determine if the fertilizer can reduce the growth of negatively affected plants.\n    "kill_plant": true,    // Determine if the fertilizer can kill negatively affected plants.\n    "negatively_affected": { // The list of negatively affected plants by the fertilizer\n      "blacklist": false, // Determine if the list should be considered as a whitelist or a blacklist\n      "plant_list": [] // List of AgriPlant ids\n    },\n    "positively_affected":  {// The list of positively affected plants by the fertilizer\n      "blacklist": false, // Determine if the list should be considered as a whitelist or a blacklist\n      "plant_list": [] // List of AgriPlant ids\n    },\n    "particles": [ // An array of particles that are spawned in the world when the fertilizer is used on a plant.\n      {\n        "amount": 2, // The amount of particles\n        "when": [ // Determine on which plants the particle should spawn\n          "positive",\n          "neutral",\n          "negative"\n        ],\n        "id": "minecraft:smoke", // The id of the particle\n        "delta_x": 0.3, // How far from the center of the block the particle can spawn (X axis).\n        "delta_y": 0.4, // How high from the center of the block the particle can spawn (Y axis).\n        "delta_z": 0.3  // How far from the center of the block the particle can spawn (Z axis).\n      }\n    ]\n  }\n}\n')))}p.isMDXComponent=!0}}]);