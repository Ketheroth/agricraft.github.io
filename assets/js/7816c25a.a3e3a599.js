"use strict";(self.webpackChunkagridocs=self.webpackChunkagridocs||[]).push([[807],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,g=p["".concat(l,".").concat(u)]||p[u]||d[u]||i;return n?r.createElement(g,o(o({ref:t},h),{},{components:n})):r.createElement(g,o({ref:t},h))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},24:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_label:"Plant"},o="AgriCraft Plant JSON",s={unversionedId:"customization/1.18/plant",id:"customization/1.18/plant",title:"AgriCraft Plant JSON",description:"AgriCraft 2.0.0 introduces an exciting new feature: JSON Custom Plants!",source:"@site/docs/customization/1.18/plant.md",sourceDirName:"customization/1.18",slug:"/customization/1.18/plant",permalink:"/agricraft.github.io/docs/customization/1.18/plant",draft:!1,editUrl:"https://github.com/AgriCraft/agricraft.github.io/tree/main/docs/customization/1.18/plant.md",tags:[],version:"current",frontMatter:{sidebar_label:"Plant"},sidebar:"customizationSidebar",previous:{title:"AgriCraft JSON",permalink:"/agricraft.github.io/docs/customization/1.18/"},next:{title:"Weed",permalink:"/agricraft.github.io/docs/customization/1.18/weed"}},l={},c=[{value:"Note",id:"note",level:2},{value:"Structure",id:"structure",level:2},{value:"Render types",id:"render-types",level:2},{value:"About Mystical Agriculture",id:"about-mystical-agriculture",level:2}],h={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"agricraft-plant-json"},"AgriCraft Plant JSON"),(0,a.kt)("p",null,"AgriCraft 2.0.0 introduces an exciting new feature: ",(0,a.kt)("strong",{parentName:"p"},"JSON Custom Plants"),"!"),(0,a.kt)("p",null,"JSON Custom Plants (i.e. AgriPlants) allow for total control of your agricultural experience,\nand even work in multiplayer environments!"),(0,a.kt)("p",null,"This page will serve as a guide to using this awesome new feature of AgriCraft!"),(0,a.kt)("h2",{id:"note"},"Note"),(0,a.kt)("p",null,"The JSON file may be located in any folder under the ",(0,a.kt)("inlineCode",{parentName:"p"},"config\\agricraft\\json\\default")," directory.\nFurthermore, the file must end in with ",(0,a.kt)("inlineCode",{parentName:"p"},"_plant.json")," so that for a plant like wheat, the file name would be ",(0,a.kt)("inlineCode",{parentName:"p"},"wheat_plant.json"),".\nThis requirement is made so that the JSON file loader can differentiate between the different JSON file types."),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("p",null,"This is the structure for Agricraft 3.0.0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json5"},'{\n  "path": "vanilla/plants/wheat_plant.json", // An internal field used for the transmission of JSON definitions.\n  "version": "1.16.4", // The version of the AgriCraft Plant JSON.\n  "json_documentation": "https://agridocs.readthedocs.io/en/master/agri_plant/", // Documentation of the AgriCraft Plant JSON.\n  "enabled": true, // Determines if the plant should be loaded or not.\n  "mods": [ // An array of mod ids. The plant will be loaded only if all mods using those ids are present.\n    "agricraft",\n    "minecraft"\n  ],\n  "id": "vanilla:wheat_plant", // The unique string id for the plant.\n  "plant_lang_key": "block.minecraft.wheat",     // The name of the plant. Can be a lang key.\n  "seed_lang_key": "item.minecraft.wheat_seeds", // The name of the seed. Can be a lang key.\n  "desc_lang_key": "agricraft.plant.wheat.desc", // The description of the plant. Can be a lang key.\n  "seed_items": [ // An array containing the seed items that map to this plant.\n    {\n      "overridePlanting": true, // Determines if the agricraft should override the object right click action. (if true, using the object will place the agricraft crop instead of the original action)\n      "type": "item",\n      "object": "minecraft:wheat_seeds", // The resource location of the object ("<mod_id>:<object_id>").\n      "useTag": false, // Determines if the object field should be considered as a tag.\n      "data": "",\n      "ignoredData": [\n        "*"\n      ]\n    }\n  ],\n  "stages": [ // An array containing the height of the plant for each growth stage.\n    2,\n    4,\n    6,\n    8,\n    10,\n    12,\n    14,\n    16\n  ],\n  "harvestStage": 4, // After harvest, the growth stage is set to be this one.\n  "growth_chance": 0.65, // The chance the plant has of growing on a random tick [range: 0.0-1.0].\n  "growth_bonus": 0.025, // The chance the plant has of growing bonus on a random tick [range: 0.0-1.0].\n  "tier": 2, // The tier of the plant. A legacy value.\n  "cloneable": true,\n  "spread_chance": 0.1, // Determines the chance the plant has of attempting to move to a neighboring crop [range: 0.0-1.0].\n  "grass_drop_chance": 0.0, // Determines the chance the seed of this plant drops when breaking a grass block [range: 0.0-1.0].\n  "seed_drop_chance": 1.0, // Determines the chance the seed of the plant drop when breaking the crop [range: 0.0-1.0].\n  "seed_drop_bonus": 0.0,\n  "products": {\n    "products": [ // A list containing the possible products of the plant.\n      {\n        "min": 1,\n        "max": 1,\n        "chance": 0.75,\n        "required": true,\n        "type": "item",\n        "object": "minecraft:wheat",\n        "useTag": false,\n        "data": "",\n        "ignoredData": []\n      }\n    ]\n  },\n  "clip_products": {\n    "products": [ // A list containing the possible clipping products of the plant.\n      {\n        "min": 0,\n        "max": 1,\n        "chance": 0.5,\n        "required": true,\n        "type": "item",\n        "object": "minecraft:wheat_seeds",\n        "useTag": false,\n        "data": "",\n        "ignoredData": []\n      }\n    ]\n  },\n  "requirement": { // Determines the growth requirements of the plant.\n    "soil_humidity": {\n      "condition": "damp",     // Determines the required humidity condition of the plant. (see AgriSoils for more information)\n      "type": "equal",         // Determines when the condition is met.\n      "tolerance_factor": 0.15 // Determines the tolerance factor of the humidity condition [range 0.0-1.0].\n    },\n    "soil_acidity": {\n      "condition": "slightly_acidic",\n      "type": "equal",\n      "tolerance_factor": 0.2\n    },\n    "soil_nutrients": {\n      "condition": "very_high",\n      "type": "equal_or_higher",\n      "tolerance_factor": 0.1\n    },\n    "min_light": 10, // The min integer light value that the plant can grow in [min: 0].\n    "max_light": 16, // The max integer light value that the plant can grow in [max: 16].\n    "light_tolerance_factor": 0.5, // The tolerance of the light value that the plant can grow in [range 0.0-1.0].\n    "seasons": [ // An array containing the seasons the plant can grow in. It is used only if a season mod is present (like Serene Season).\n      "spring",\n      "summer",\n      "autumn",\n      "winter"\n    ],\n    "conditions": [ // An array containing all the growth conditions to be met.\n      {\n        "strength": 11,\n        "amount": 1, // the amount required in the given range\n        "min_x": 0,  // The bounding box, relative to the crop at 0, 0, 0 in which the block(s) are to be placed.\n        "min_y": -2, // In this case we specify the box {(0, -2, 0), (0, -2, 0)}, which is the single block directly\n        "min_z": 0,  // below the soil block. Notice that the upper bound is inclusive, so that to specify a\n        "max_x": 0,  // single block we use the same point twice, not the upper left and lower right points.\n        "max_y": -2,\n        "max_z": 0,\n        "type": "block",\n        "object": "forge:ores/gold", // This part specifies information about the block required.\n        "useTag": true, // The block required should match the tag in the `object` value\n        "data": "",\n        "ignoredData": []\n      }\n    ],\n    "fluid": { // The required fluid the plant needs to be in to grow.\n      "type": "fluid",\n      "object": "minecraft:empty",\n      "useTag": false,\n      "data": "",\n      "ignoredData": []\n    }\n  },\n  "callbacks": [ // An array of callbacks the crop will use. Those are all the default callbacks.\n    "agricraft:brightness", // the crop emit light\n    "agricraft:burn",       // the crop burn colliding entities\n    "agricraft:bushy",      // the crop slow down colliding entities\n    "agricraft:experience", // the corp drop experience on harvest\n    "agricraft:poisoning",  // the crop apply the poison effect to colliding entities\n    "agricraft:redstone",   // the crop emit redstone signal\n    "agricraft:thorns",     // the crop hurt colliding entities (like a cactus)\n    "agricraft:withering"   // the crop apply the wither effect to colliding entities\n  ],\n  "texture": {\n    "render_type": "hash", // Can be either "cross", "hash", "plus", or "gourd". This determines the method used to render the plant. (More info below)\n    "plant_models": [ // An array of strings representing the plant models.\n      // The elements are ordered, that means the first element is for the first growth stage, the second element is for the second growth stage, and so on.\n      // If an element is empty, agricraft bake the model with the stage texture.\n      // This array override the texture array for the in-world crop.\n    ],\n    "plant_textures": [ // An array of strings representing the plant textures.\n      // The elements are ordered, that means the first element is for the first growth stage, the second element is for the second growth stage, and so on.\n      [\n        "agricraft:plant/wither_rose1" // Amount of textures needed : floor(<stage_height> / 16) + 1\n      ],\n      [\n        "agricraft:plant/wither_rose1"\n      ],\n      [\n        "agricraft:plant/wither_rose2"\n      ],\n      [\n        "agricraft:plant/wither_rose2"\n      ],\n      [\n        "agricraft:plant/wither_rose2"\n      ],\n      [\n        "agricraft:plant/wither_rose3"\n      ],\n      [\n        "agricraft:plant/wither_rose3"\n      ],\n      [\n        "agricraft:plant/wither_rose4"\n      ]\n    ]\n  },\n  "seed_texture": "agricraft:seed/wither_rose", // A string representing the seed texture. This is used for the autogenerated seed items.\n  "seed_model": "agricraft:seed/wither_rose", // A string representing the seed model. This is used for the autogenerated seed items.\n  "particle_effects": [ // An array describing the particles the plant produce.\n    {\n      "probability": 0.5, // The probability the particle will spawn [range 0.0-1.0].\n      "stages": [ // An array containing the indexes of the stages the plant can produce particles.\n        7\n      ],\n      "particle": "minecraft:smoke", // The id of the particle\n      "delta_x": 0.3, // How far from the center of the block the particle can spawn (X axis).\n      "delta_y": 0.4, // How high from the center of the block the particle can spawn (Y axis).\n      "delta_z": 0.3  // How far from the center of the block the particle can spawn (Z axis).\n    }\n  ]\n}\n')),(0,a.kt)("h2",{id:"render-types"},"Render types"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Hashtag")," (#) : 4 faces parallel with the block faces, similar to Vanilla wheat."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Cross"),"   (x) : 2 faces along the diagonals, similar to Vanilla flowers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Plus"),"    (+) : Similar to cross, but instead 4 crosses at each crop stick."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Gourd"),"   (@) : i.e. for pumpkins and melons: renders a hash pattern for the initial stages, with a small gourd for the final stage."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Rhombus")," (\u25c7) : 4 faces spanning between the centers of the block faces, only used for weeds.")),(0,a.kt)("h2",{id:"about-mystical-agriculture"},"About Mystical Agriculture"),(0,a.kt)("p",null,"Mystical Agriculture and its addon have non-usual plants. Their plants/seeds are dynamically colored.\nWe thus introduced a new render type ",(0,a.kt)("strong",{parentName:"p"},"mysticalagriculture")," which render the plant like the ",(0,a.kt)("strong",{parentName:"p"},"plus")," render type.\nThis render type expects the last texture in the textures array to contain two textures: one for the stem, and another for the flowers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n    "mysticalagriculture:block/mystical_resource_crop_7",\n    "mysticalagriculture:block/flower_ingot"\n]\n')))}d.isMDXComponent=!0}}]);