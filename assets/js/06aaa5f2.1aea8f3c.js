"use strict";(self.webpackChunkagridocs=self.webpackChunkagridocs||[]).push([[681],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_label:"Plant"},o="AgriCraft Plant JSON",s={unversionedId:"customization/1.12/plant",id:"customization/1.12/plant",title:"AgriCraft Plant JSON",description:"AgriCraft 2.0.0 introduces an exciting new feature: JSON Custom Plants!",source:"@site/docs/customization/1.12/plant.md",sourceDirName:"customization/1.12",slug:"/customization/1.12/plant",permalink:"/agricraft.github.io/docs/customization/1.12/plant",draft:!1,editUrl:"https://github.com/AgriCraft/agricraft.github.io/tree/main/docs/customization/1.12/plant.md",tags:[],version:"current",frontMatter:{sidebar_label:"Plant"},sidebar:"customizationSidebar",previous:{title:"AgriCraft JSON",permalink:"/agricraft.github.io/docs/customization/1.12/"},next:{title:"Mutation",permalink:"/agricraft.github.io/docs/customization/1.12/mutation"}},l={},c=[{value:"Note",id:"note",level:2},{value:"Structure",id:"structure",level:2}],u={toc:c},p="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"agricraft-plant-json"},"AgriCraft Plant JSON"),(0,a.kt)("p",null,"AgriCraft 2.0.0 introduces an exciting new feature: ",(0,a.kt)("strong",{parentName:"p"},"JSON Custom Plants"),"!"),(0,a.kt)("p",null,"JSON Custom Plants (i.e. AgriPlants) allow for total control of your agricultural experience,\nand even work in multiplayer environments!"),(0,a.kt)("p",null,"This page will serve as a guide to using this awesome new feature of AgriCraft!"),(0,a.kt)("h2",{id:"note"},"Note"),(0,a.kt)("p",null,"The JSON file may be located in any folder under the ",(0,a.kt)("inlineCode",{parentName:"p"},"config\\agricraft\\json\\default")," directory.\nFurthermore, the file must end in with ",(0,a.kt)("inlineCode",{parentName:"p"},"_plant.json")," so that for a plant like wheat, the file name would be ",(0,a.kt)("inlineCode",{parentName:"p"},"wheat_plant.json"),".\nThis requirement is made so that the JSON file loader can differentiate between the different JSON file types."),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json5"},'{\n  "enabled": true, // Determines if the plant should be loaded or not.\n  "path": "", // An internal field used for the transmission of JSON definitions.\n  "id": "", // The unique string id for the plant.\n  "plant_name": "", // The name of the plant. This does not need to be unique.\n  "seed_name": "", // The name of the auto-generated seed for the plant. This will not be used if a valid seed item is defined.\n  "seed_items": [ // An array containing the seed items that map to this plant.\n    {\n      "item": "minecraft:wheat_seeds",\n      "meta": 0,\n      "tags": "",\n      "ignoreMeta": false,\n      "ignoreTags": [\n        "*"\n      ],\n      "useOreDict": false\n    }\n  ],\n  "description": {\n    "translations": {}, // An array containing locale:translation entries.\n    "default": "" // The default description of the plant.\n  },\n  "growth_chance": 1.0, // The chance the plant has of growing on a random tick [range: 0.0-1.0].\n  "bonemeal": true, // Determines if the plant accepts fertilizer to accelerate its growth.\n  "tier": 1, // The tier of the plant. A legacy value.\n  "weedable": false, // Determines if the plant acts like a weed and cannot be harvested normally.\n  "aggressive": false, // Determines if the plant should try to overtake neighboring crops.\n  "spread_chance": 0.1, // Determines the chance the plant has of attempting to move to a neighboring crop [range: 0.0-1.0].\n  "spawn_chance": 0.0, // Determines the chance the plant has of randomly spawning in an unoccupied crop [range: 0.0-1.0].\n  "products": {\n    "products": [ // A list containing the possible products of the plant.\n      {\n        "min": 1,\n        "max": 3,\n        "chance": 0.95,\n        "required": true,\n        "item": "minecraft:wheat",\n        "meta": 0,\n        "tags": "",\n        "ignoreMeta": false,\n        "ignoreTags": [],\n        "useOreDict": false\n      }\n    ]\n  },\n  "requirement": {\n    "min_light": 10, // The min integer light value that the plant can grow in [min: 0].\n    "max_light": 16, // The max integer light value that the plant can grow in [max: 16].\n    "soils": [], // Array containing string ids for AgriSoils that are considered valid for this plant.\n    "conditions": [ // Array containing all the growth requirement conditions to be met.\n      {\n        "amount": 1,  // The amount required in the given range.\n        "min_x": 0,   // The bounding box, relative to the crop at 0, 0, 0 in which the block(s) are to be placed.\n        "min_y": -2,  // In this case we specify the box {(0, -2, 0), (0, -2, 0)}, which is the single block directly\n        "min_z": 0,   // below the soil block. Notice that the upper bound is inclusive, so that to specify a\n        "max_x": 0,   // single block we use the same point twice, not the upper left and lower right points.\n        "max_y": -2,\n        "max_z": 0,\n        "item": "minecraft:gold_ore", // This part specifies information about the block required.\n        "meta": 0, // This is a *direct* extension of an AgriStack meaning that it has all the same fields as\n        "tags": "", // would be found on say the seed_items field.\n        "ignoreMeta": true,\n        "ignoreTags": [],\n        "useOreDict": true\n      }\n    ]\n  },\n  "texture": {\n    "render_type": "", // Can be either "cross", "hash", or "stem". This determines the method used to render the plant.\n    "seed_texture": "", // A string representing the seed texture. This is used for the autogenerated seed items.\n    "plant_textures": [] // An array of strings representing the plant textures.\n  }\n}\n')))}h.isMDXComponent=!0}}]);